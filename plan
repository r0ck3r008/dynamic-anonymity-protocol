1)  there are clients and official peers
2)  there are two tables that store network matadata,
        1)  mapping of a unique identifier of official peers with their ip
        2)  mapping of a unique identifier of clients with their ip
3)  the client has one official peer assigined at very begining of network registration randomly
4)  the official peer can have any number of feasible client associated
5)  client can send only to its peer and can recv from anyone
6)  peer has no bounds in receving or sending
7)  the asymmetric encryption happens between clinet C1 and its peer P1
8)  client C1 initiates a transaction by generating a random number and appending with its peer's id and with send bit then sending it to its peer
9)  peer calculates a randomised index to map the clinet-ip network matadata (excluding the clients under it self) and sends the packet to that client C2
10) Client C2 sends that packet to its peer P2 which then passes on the packet it its required destination after removing the network header
Sending part of transaction complete---

11) On receving a reply from C1's destination server, peer P2 again calculates a new randomised index to map the client-ip network matadata (again excluding clients under itself), flips the send bit to recv bit and by appending stored network header, sends the packet to new client C3.
12) On receving a random packet from peer P3, client C3 sends that to its peer P3
13) P3 notices the reply bit in the packet and maps the peer id, generated by C1 initiatially, to peer P1's ip and send the packet to P1
14) P1 on receving packet and noticing recv bit, maps the random number in its client db and sends that packet to the client C1
15) C1 receives the response and finally parses the output.
Receving part complete---
